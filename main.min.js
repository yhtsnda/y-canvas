var Topic = function(c) {
    this.topic = c;
    this.refresh = function() {
        this.latest = (new Date).getTime();
    };
    this.refresh();
},
Handler = function(c, d) {
    c && this instanceof Handler && (this.handler = c, this.target = d, this.refresh = function() {
        this.latest = (new Date).getTime();
    },
    this.refresh());
},
MessageCenter = {
    topics: [],
    handlers: [],
    trigger: function(c) {
        if (this.handlers && this.handlers[c]) {
            for (var c = this.handlers[c], d = 0; d < c.length; d++) {
                c[d] && c[d].handler && c[d].handler();
            }
        }
    },
    _getTopic: function(c) {
        for (var d = 0; d < this.topics.length; d++) {
            var f = this.topics[d];
            if (f && f.topic === c) {
                return this.topics[d];
            }
        }
    },
    onPublish: function(c) {
        if (c) {
            var d = this._getTopic(c);
            d ? d.refresh() : this.topics.push(new Topic(c));
            this.trigger(c);
        }
    },
    onSubscribe: function(c, d, f) {
        if (c) {
            this.handlers[c] || (this.handlers[c] = []);
            for (var g = 0; g < this.handlers[c].length; g++) {
                var h = this.handlers[c][g];
                if (h && h.handler === d && h.target === f) {
                    this.handlers[c][g].refresh();
                    return;
                }
            }
            d = new Handler(d, f);
            this.handlers[c].push(d);
        }
    },
    onUnSubscribe: function(c, d, f) {
        if (c) {
            if (d && f) {
                for (var g in this.handlers[d]) {
                    if (this.handlers[d][g] && this.handlers[d][g].handler === f && this.handlers[d][g].target === c) {
                        this.handlers[d][g] = null;
                        delete this.handlers[d][g];
                        break;
                    }
                }
            } else if (d && !f) {
                for (g in this.handlers[d]) {
                    if (this.handlers[d][g] && this.handlers[d][g].target === c) {
                        this.handlers[d][g] = null;
                        delete this.handlers[d][g];
                        break;
                    }
                }
            } else if (!d && f) {
                for (d in this.handlers) {
                    for (g in this.handlers[d]) {
                        if (this.handlers[d][g] && this.handlers[d][g].target === c && this.handlers[d][g].handler === f) {
                            this.handlers[d][g] = null;
                            delete this.handlers[d][g];
                            break;
                        }
                    }
                }
            } else if (!d && !f) {
                for (d in this.handlers) {
                    for (g in this.handlers[d]) {
                        if (this.handlers[d][g] && this.handlers[d][g].target === c) {
                            this.handlers[d][g] = null;
                            delete this.handlers[d][g];
                            break;
                        }
                    }
                }
            }
        }
    },
    refreshInterval: 60000,
    refresh: function() {},
    clearTopic: function(c) {
        for (var d = 0; d < this.topics.length; d++) {
            var f = this.topics[d];
            f && f.topic == c && (this.topics[d] = null);
        }
    },
    clearSubscribe: function(c, d) {
        for (var f in this.handlers) {
            for (var g = this.handlers[f], h = 0; h < g.length; h++) {
                g[h] && g[h].handler === d && (g[h] = null, delete g[h]);
            }
            g && 0 == g.length && delete this.handlers[f];
        }
    }
};
MessageCenter.refresh();
Object.prototype.publish = function(c) {
    MessageCenter.onPublish(c);
};
Object.prototype.subscribe = function(c, d) {
    MessageCenter.onSubscribe(c, d, this);
};
Object.prototype.unSubscribe = function(c, d) {
    MessageCenter.onUnSubscribe(this, c, d);
};
var getConfigUtil = function() {
    if (window.config) {
        return window.config;
    }
    window.config = new(function() {
        if (window.ConfigUtil) {
            return window.ConfigUtil;
        }
        this.copy = function(c, d) {
            for (var f in c) {
                d[f] = c[f];
            }
        };
        this.defaultGameState = function() {
            var c = {
                scenes: [],
                currentScene: null,
                canvas: null,
                context: null
            };
            c.gameState = GameState.notplaying;
            c.FPS = 30;
            c.width = 600;
            c.height = 600;
            c.sleep = 1000 * 0.03333333333333333;
            return c;
        };
        this.defaultSpriteState = function() {
            var c = {
                position: {
                    x: 0,
                    y: 0
                },
                speed: {
                    speedX: 0,
                    speedY: 0
                },
                acce: {
                    acceX: 0,
                    acceY: 0
                }
            };
            c.w = c.h = 600;
            c.lastSpeedX = c.lastSpeedY = c.lastX = c.lastY = 0;
            return c;
        };
        this.defaultLayerState = function() {
            return {
                index: 0
            };
        };
    });
    return window.config;
},
GameState = {
    notplaying: 0,
    playing: 1,
    paused: 2,
    stopped: 3,
    destroyed: 4
};
window.requestAnimFrame = (function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame ||
    function(c) {
        window.setTimeout(c, this.sleep || (this.sleep = Math.round(16.666666666666668)));
    };
})();
function Game(c) {
    if (false != this instanceof Game) {
        getConfigUtil().copy(getConfigUtil().defaultGameState(), this);
        getConfigUtil().copy(c, this);
        var d = this;
        window.game = this;
        this.inHandingEvent = false;
        this.state = null;
        var f = function() {
            if (d.state == GameState.playing) {
                d.preTime = (new Date).valueOf();
                d.update();
                void 0 === d.frameCount ? (d.frameCount = 0) : null;
                if (d.frameDate) {
                    d.frameCount++;
                    if (10 == d.frameCount) {
                        var c = (new Date).valueOf();
                        d.frameDate && (d.fpsText = Math.round(100000 / (c - d.frameDate)) / 10);
                        d.frameDate = c;
                        d.frameCount = 0;
                    }
                    d.fpsText && (c = GameUtil.getContext(), c.save(), c.font = "20px sans-serif bold", c.fillText(d.fpsText, 10, 20), c.restore());
                }
                requestAnimFrame(f);
            }
        };
        this.particalSystems = [];
        this.timeStamp = 0;
        this.update = function() {
            this.timeStamp++;
            this.inHandingEvent = true;
            this.handleEvents();
            this.context && this.context.clearRect(0, 0, this.canvasWidth, this.canvasHeight);
            this.currentScene && this.currentScene.update && this.currentScene.update(this.context);
            if (this.particalSystems && 0 < this.particalSystems.length) {
                for (var c in this.particalSystems) {
                    var f = this.particalSystems[c];
                    f instanceof ParticalSystem && f.update(this.context);
                }
            }
            this.inHandingEvent = false;
            EventSystem.resetEvents();
        };
        this.setCurrentScene = function(c) {
            c && this.currentScene && this.currentScene.clear();
            this.currentScene = c;
        };
        this.runScene = function() {};
        this.stop = function() {
            this.state = GameState.stopped;
        };
        this.pause = function() {
            this.state = GameState.paused;
        };
        this.start = function() {
            this.state = GameState.playing;
            f();
        };
        this.destroy = function() {};
        this.setFPS = function(c) {
            this.FPS = c;
            this.sleep = Math.round(1000 / c);
        };
        this.handleEvents = function() {
            var c = EventSystem._events,
            f;
            for (f in c) {
                var d = c[f];
                if (this.currentScene) {
                    if (this.currentScene.handleEvent(d)) {
                        break;
                    }
                    EventSystem.removeEvent(d);
                }
            }
        };
        var g = this.canvasId,
        h = c.width,
        c = c.height;
        "string" == typeof g && (g = document.getElementById(g));
        g.width = h;
        g.height = c;
        g && g.getContext && (d.canvasWidth = g.width, d.canvasHeight = g.height, d.context = g.getContext("2d"), d.canvas = g);
        return this;
    }
}
var GameUtil = {
    getContext: function() {
        return window.game.context;
    },
    getDom: function() {
        return window.game.canvas;
    },
    getRunningGame: function() {
        return window.game;
    }
},
Util = {
    pointInrect: function(c, d) {
        return (c.x >= d[0] && c.x <= d[2] || c.x <= d[0] && c.x >= d[2]) && (c.y >= d[1] && c.y <= d[3] || c.y <= d[1] && c.y >= d[3]) ? true: false;
    },
    clone: function(c) {
        var d = c instanceof Array ? [] : {},
        f;
        for (f in c) {
            var g = c[f];
            d[f] = g instanceof Array ? Util.clone(g) : "object" == typeof g && !(g instanceof HTMLElement) ? Util.clone(g) : g;
        }
        return null;
    }
},
DebugUtil = {};
DebugUtil.log = DebugUtil.log ||
function(c) {
    window.console && console.log && "function" == typeof console.log ? console.log(c) : null;
};
DebugUtil.assert = DebugUtil.assert ||
function(c) {
    window.console && console.assert && "function" == typeof console.assert ? console.assert(c) : null;
};
DebugUtil.error = DebugUtil.error ||
function(c) {
    throw Error(c);
};
function Scene() {
    if (false != this instanceof Scene) {
        var c = [];
        this.getLayers = function() {
            return c;
        };
        this.getLayerByTag = function(d) {
            for (var f = 0; f < c.length; f++) {
                if (c[f] && c[f].tag == d) {
                    return c[f];
                }
            }
        };
        this.addLayer = function(d) {
            c.push(d);
        };
        this.removeLastLayer = function() {
            c.pop();
        };
        this.showLayer = function() {};
        this.handleEvent = function(c) {
            var f = this.getLayers();
            if (f) {
                f.sort(function(c, f) {
                    return c.index > f.index;
                });
                for (var g in f) {
                    if (f[g].handleEvent(c)) {
                        break;
                    }
                }
            }
            f = g = null;
        };
        this.update = function(c) {
            var f = this.getLayers();
            if (f) {
                f.sort(function(c, f) {
                    return c.index > f.index;
                });
                for (var g = 0; g < f.length; g++) {
                    f[g] && f[g].update && f[g].update(c);
                }
            }
            g = f = null;
        };
        this.clear = function() {
            this.unSubscribe();
            for (var d = 0; d < c.length; d++) {
                c[d] && c[d].clear && c[d].clear(),
                c[d] = null,
                delete c[d];
            }
            c = null;
            for (var f in this) {
                this[f] = null,
                delete this[f];
            }
        };
        return this;
    }
}
var Layer = function(c) {
    if (false != this instanceof Layer) {
        var d = this,
        f = [];
        getConfigUtil().copy(getConfigUtil().defaultLayerState(), this);
        getConfigUtil().copy(c, this);
        this.onUpdate = function() {};
        var g = false,
        h = false;
        this.isPlaying = function() {
            return ! (g || h);
        };
        var m = true;
        this.setVisible = function(c) {
            m = c;
        };
        this.isVisible = function() {
            return m;
        };
        this.pause = function() {
            g = true;
            for (var c in f) {
                var d = f[c];
                d && d.pause && d.pause();
            }
            i = null;
        };
        this.stop = function() {
            h = true;
            for (var c in f) {
                var d = f[c];
                d && d.stop && d.stop();
            }
            i = null;
        };
        this.resume = function() {
            g = h = false;
            for (var c in f) {
                var d = f[c];
                d.resume && d.resume();
            }
        };
        this.update = function(c) {
            this.init();
            m && !g && !h && (ActionManager.performCurrentActionWithTarget(this), z(), this.onUpdate && this.onUpdate());
            m && k && k(c);
        };
        var k = function(c) {
            if (f) {
                f.sort(function(c, f) {
                    if (c && f && c.getIndex && f.getIndex && void 0 != c.getIndex() && null != f.getIndex()) {
                        return c.getIndex() > f.getIndex();
                    }
                });
                for (var d in f) {
                    var g = f[d];
                    g && g.update && g.update(c);
                }
                i = g = c = null;
            }
        },
        q = 1;
        this.getAlpha = function() {
            return q;
        };
        this.setAlpha = function(c) {
            q = c;
            if (f) {
                for (var d in f) {
                    f[d].setLayerAlpha(q);
                }
            }
        };
        this.getActualAlpha = function() {
            return q;
        };
        this.addChild = function(c) {
            c && (c.setLayer(this), f.push(c));
        };
        var u = {
            x: 0,
            y: 0
        };
        this.getPosition = function() {
            return u;
        };
        this.setPosition = function(c) {
            u = c;
        };
        var p = 0,
        l = null;
        this.getMainAction = function() {
            return l;
        };
        this.setMainAction = function(c) {
            l = c;
        };
        this.startAction = function(c, f) {
            ActionManager.startActionWithTarget(c, this, f);
        };
        this.getCurrentActionIndex = function() {
            return p;
        };
        var n = [];
        this.addActionToCurrent = function(c) {
            for (var f = 0; f < n.length; f++) {
                if (n[f] === c) {
                    return;
                }
            }
            n.push(c);
        };
        this.replaceActionFromCurrentWith = function(c, f) {
            for (var d = 0; d < n.length; d++) {
                if (n[d] === c) {
                    n[d] = f;
                    break;
                }
            }
        };
        this.replaceActionFromCurrentWithIndex = function(c, f) {
            n.length <= c || (n[c] = f);
        };
        this.removeActionFromCurrent = function(c) {
            for (var f = 0; f < n.length; f++) {
                if (n[f] === c) {
                    delete n[f];
                    break;
                }
            }
        };
        this.removeActionFromCurrentByIndex = function(c) {
            delete n[c];
        };
        this.getCurrentAction = function() {
            return n;
        };
        this.removeChild = function(c) {
            for (var d in f.length) {
                if (f[d] === c) {
                    f[d] = null;
                    delete f[d];
                    break;
                }
            }
        };
        this.getChildren = function() {
            return f;
        };
        this.getChildByIndex = function(c) {
            if (f && f.length > c) {
                return f[c];
            }
        };
        this.getChildByTag = function(c) {
            for (var d in f) {
                var g = f[d];
                if (g && null != g.tag && g.tag == c) {
                    return g;
                }
            }
            return null;
        };
        this.handleEvent = function(c) {
            for (var d in f) {
                if (f[d] && f[d].handleEvent && f[d].handleEvent(c)) {
                    break;
                }
            }
        };
        var y = false;
        this.init = function() {
            y || (this.onInit(), y = true);
        };
        this.onInit = function() {};
        this.onKey = [];
        this.onMouse = [];
        this.onTouch = [];
        var r = null;
        this.setEventHandler = function(c) {
            r = c;
            j = true;
            x = false;
        };
        var j = true,
        x = false,
        z = function() {
            if (j || !x) {
                r && r.call(d),
                j = false,
                x = true;
            }
            var c = EventSystem._mouseEvents;
            if (c) {
                for (var f = 0; f < c.length; f++) {
                    var g = c[f];
                    if (g) {
                        for (var h in d.onMouse) {
                            if (g.type == "mouse" + h) {
                                var l = d.onMouse[h];
                                l.call(d, g);
                                break;
                            }
                        }
                    }
                }
            }
            h = null;
            if (c = EventSystem._touchEvents) {
                for (f = 0; f < c.length; f++) {
                    if (g = c[f]) {
                        for (h in d.onTouch) {
                            if (g.type == "touch" + h) {
                                l = d.onTouch[h];
                                l.call(d, g);
                                break;
                            }
                        }
                    }
                }
            }
            h = null;
            if (c = EventSystem._keyboardEvents) {
                for (f = 0; f < c.length; f++) {
                    var g = c[f],
                    l = g.keyCode || g.which,
                    m = 0;
                    for (h in d.onKey) {
                        m++;
                    }
                    if (0 < m) {
                        for (h in d.onKey) {
                            if (Keyboard._keyMap[h] == l) {
                                l = d.onKey[h];
                                l.call(d, g);
                                break;
                            }
                        }
                    } else {
                        d.handlekeyBoardEvents && d.handlekeyBoardEvents(EventSystem._keyboardEvents);
                    }
                }
            }
        };
        this.clear = function() {
            this.unSubscribe();
            for (var c in f) {
                f[c] && f[c].clear && f[c].clear(),
                f[c] = null;
            }
            for (var m in this) {
                this[m] && this[m].clear && this[m].clear(),
                this[m] = null,
                delete this[m];
            }
            d = k = g = h = q = u = p = l = n = y = r = j = x = z = null;
        };
        return this;
    }
};
function Sprite(c) {
    if (false != this instanceof Sprite) {
        getConfigUtil().copy(getConfigUtil().defaultSpriteState(), this);
        getConfigUtil().copy(c, this);
        c && c.sizes && (this.indexTotal = c.sizes.length);
        var d = [],
        f = 0,
        g = 0,
        h = this;
        this.getCurrentIndex = function() {
            return g;
        };
        this.setCurrentIndex = function(c) {
            g = c;
        };
        var m = 0;
        this.getIndex = function() {
            return m;
        };
        this.setIndex = function(c) {
            m = c;
        };
        var k = [];
        this.addChild = function(c) {
            c.setParent(this);
            k.push(c);
        };
        this.removeChild = function(c) {
            for (var f = 0; f < k.length; f++) {
                if (k[f] === c) {
                    k[f].setParent(null);
                    k[f].clear();
                    k[f] = null;
                    break;
                }
            }
        };
        this.removeChildByTag = function(c) { (c = this.getChildByTag(c)) ? this.removeChild(c) : null;
        };
        this.getChildByTag = function(c) {
            for (var f = 0; f < k.length; f++) {
                if (k[f] && k[f].tag && k[f].tag == c) {
                    return k[f];
                }
            }
        };
        this.getChildren = function() {
            return k;
        };
        var q = null;
        this.getParent = function() {
            return q;
        };
        this.setParent = function(c) {
            q = c;
        };
        var u = {
            x: 0,
            y: 0
        },
        p = {
            x: 0,
            y: 0
        };
        this.getActualPosition = function() {
            var c = this.getPosition();
            return {
                x: c.x + this.getWidth() * p.x * (1 - s.x),
                y: c.y + this.getHeight() * p.y * (1 - s.y)
            };
        };
        this.setAnchorPoint = function(c) {
            p = c;
        };
        this.getAnchorPoint = function() {
            return p;
        };
        var l = {
            x: 0,
            y: 0
        };
        this.setPosition = function(c) {
            l = c;
        };
        this.setPositionX = function(c) {
            l.x = c;
        };
        this.setPositionY = function(c) {
            l.y = c;
        };
        var n = null;
        this.setLayer = function(c) {
            n = c;
        };
        this.getLayer = function() {
            return n;
        };
        this.getLayerPosition = function() {
            return this.getLayer && this.getLayer() ? this.getLayer().getPosition() : this.getParent() ? this.getParent().getLayerPosition() : {
                x: 0,
                y: 0
            };
        };
        this.getPosition = function() {
            if (v) {
                var c = this.getLayerPosition();
                return {
                    x: l.x + c.x,
                    y: l.y + c.y
                };
            }
            c = null;
            this.layer ? (c = this.getLayerPosition(), c = {
                x: c.x + l.x,
                y: c.y + l.y
            }) : (c = l);
            var f = this.getParent();
            f && f.getPosition && (f = f.getPosition(), c = {
                x: f.x + c.x,
                y: f.y + c.y
            });
            return c;
        };
        var y = null,
        r = null;
        this.getWidth = function() {
            return y;
        };
        this.getActualWidth = function() {
            return y * s.x;
        };
        this.getActualHeight = function() {
            return r * s.y;
        };
        this.setWidth = function(c) {
            y = c;
        };
        this.getHeight = function() {
            return r;
        };
        this.setHeight = function(c) {
            r = c;
        };
        var j = null;
        this.setPrePosition = function(c) {
            j = c;
        };
        this.getPrePosition = function() {
            return j;
        };
        var x = false;
        this.setNoAlpha = function(c) {
            x = c;
        };
        this.getNoAlpha = function() {
            return x;
        };
        var z = 1;
        this.setAlpha = function(c) {
            z = c;
        };
        this.getActualAlpha = function() {
            if (x) {
                return 1;
            }
            var c = this.getParent();
            return c ? z * c.getActualAlpha() : z;
        };
        var v = false;
        this.setStaleLessParentPosition = function(c) {
            v = c;
        };
        this.getStaleLessParentPosition = function() {
            return v;
        };
        this.drawWithoutImage = function() {};
        var A = 0;
        this.getRotate = function() {
            return A;
        };
        this.setRotate = function(c) {
            A = c;
        };
        var s = {
            x: 1,
            y: 1
        };
        this.getScale = function() {
            return s;
        };
        this.setScale = function(c) {
            s = c;
        };
        var D = {
            x: null,
            y: null
        };
        this.getTranslate = function() {
            return D;
        };
        this.setTranslate = function(c) {
            D = c;
        };
        var w = null;
        this.getTransform = function() {
            return w;
        };
        this.setTransform = function(c) {
            w = c;
        };
        var E = true;
        this.getVisible = function() {
            return E;
        };
        this.setVisible = function(c) {
            E = c;
        };
        this.performTransform = function(c) {
            if (null != A) {
                var f = this.getActualPosition(),
                d = this.getWidth(),
                g = this.getHeight(),
                h = this.getAnchorPoint();
                c.translate(f.x + d * h.x, f.y + g * h.y);
                c.rotate(A);
                c.translate( - f.x - d * h.x, -f.y - g * h.y);
            } (1 != s.x || 1 != s.y) && c.scale(s.x, s.y);
            w && 6 <= w.length && c.transform(w[0], w[1], w[2], w[3], w[4], w[5]);
        };
        this.onImageLoad = function() {};
        this.setImageIndex = function(c) {
            f = c;
        };
        this.getImage = function() {
            return f >= d.length ? null: d[f];
        };
        this.setImage = function(c, f) {
            d[c] = f;
        };
        this.afterRender = function() {};
        var F = function(c, f, g) {
            c && ImageLoad(g,
            function(h) {
                d[f] = h;
                null == c.getWidth() && c.setWidth(h.width);
                null == c.getHeight() && c.setHeight(h.height);
                c.loaded = true;
                c.onImageLoad();
                c.imageSize = {
                    w: h.width,
                    h: h.height
                };
                f = g = null;
            });
        },
        J = function(c, f, d) {
            if (c) {
                f.save();
                d.performTransform(f);
                var g = d.getActualAlpha();
                0 > g ? (g = 0) : null;
                f.globalAlpha = g;
                if (d.sizes) {
                    d.getCurrentIndex() || d.setCurrentIndex(0);
                    g = d.getCurrentIndex();
                    g >= d.indexTotal && d.setCurrentIndex(d.indexTotal % g);
                    var g = d.sizes[d.getCurrentIndex()],
                    h = d.getActualPosition();
                    f.drawImage(c, g[0], g[1], g[2], g[3], h.x / s.x, h.y / s.y, g[2], g[3]);
                    f.globalAlpha = 1;
                    f.beginPath();
                    d.setCurrentIndex(d.getCurrentIndex() + 1);
                    f.closePath();
                    f.restore();
                    d.afterRender();
                } else {
                    d.setWidth(c.width),
                    d.setHeight(c.height),
                    d = d.getActualPosition(),
                    f.drawImage(c, d.x / s.x, d.y / s.y),
                    f.restore();
                }
            }
        };
        this.render = function() {
            if (this.url) {
                if (0 == d.length && 0 == f) {
                    if ("string" == typeof this.url) {
                        F(this, 0, this.url);
                    } else {
                        if (this.url instanceof Array) {
                            for (var c = 0; c < this.url.length; c++) {
                                F(this, c, this.url[c]);
                            }
                        }
                    }
                } else {
                    J(this.getImage(), GameUtil.getContext(), this);
                }
            } else {
                this.loaded = this.loaded || true,
                this.drawWithoutImage(GameUtil.getContext());
            }
        };
        this.onUpdate = function() {};
        var B = _stop = false;
        this.isPlaying = function() {
            return ! (B || _stop);
        };
        this.pause = function() {
            B = true;
        };
        this.stop = function() {
            _stop = true;
        };
        this.resume = function() {
            B = _stop = false;
        };
        var G = null;
        this.getMainAction = function() {
            return G;
        };
        this.setMainAction = function(c) {
            G = c;
        };
        this.startAction = function(c, f) {
            ActionManager.startActionWithTarget(c, this, f);
        };
        this.getCurrentActionIndex = function() {
            return 0;
        };
        var t = [];
        this.addActionToCurrent = function(c) {
            for (var f = 0; f < t.length; f++) {
                if (t[f] === c) {
                    return;
                }
            }
            t.push(c);
        };
        this.replaceActionFromCurrentWith = function(c, f) {
            for (var d = 0; d < t.length; d++) {
                if (t[d] === c) {
                    t[d] = f;
                    break;
                }
            }
        };
        this.replaceActionFromCurrentWithIndex = function(c, f) {
            t.length <= c || (t[c] = f);
        };
        this.removeActionFromCurrent = function(c) {
            for (var f = 0; f < t.length; f++) {
                if (t[f] === c) {
                    delete t[f];
                    break;
                }
            }
        };
        this.removeActionFromCurrentByIndex = function(c) {
            delete t[c];
        };
        this.getCurrentAction = function() {
            return t;
        };
        this.update = function(c) {
            if (this.getVisible() && (!B && !_stop && (ActionManager.performCurrentActionWithTarget(this), K(), this.onUpdate && this.onUpdate()), this.render && (this.render(), this.loaded))) {
                for (var f = this.getChildren(), d = 0; d < f.length; d++) {
                    f[d] && f[d].update(c);
                }
            }
        };
        this.destroy = function() {
            d = g = m = l = _size = j = null;
            for (var c in this) {
                delete this[c];
            }
        };
        this.onKey = [];
        this.onMouse = [];
        this.onTouch = [];
        var C = null;
        this.setEventHandler = function(c) {
            C = c;
            H = true;
            I = false;
        };
        var H = true,
        I = false,
        K = function() {
            if (H || !I) {
                C && C.call(h),
                H = false,
                I = true;
            }
            var c = EventSystem._mouseEvents;
            if (c) {
                for (var f = 0; f < c.length; f++) {
                    var d = c[f];
                    if (d && h && h.getActualPosition) {
                        var g = d.absolutePosition,
                        j = h.getActualPosition();
                        if (g.x >= j.x && g.x <= j.x + h.getWidth() && g.y >= j.y && g.y <= j.y + h.getHeight()) {
                            for (var l in h.onMouse) {
                                if (d.type == "mouse" + l) {
                                    g = h.onMouse[l];
                                    g.call(h, d);
                                    break;
                                }
                            }
                        }
                    }
                    l = null;
                }
            }
            if (c = EventSystem._keyboardEvents) {
                for (f = 0; f < c.length; f++) {
                    d = c[f];
                    g = d.keyCode || d.which;
                    j = 0;
                    for (l in h.onKey) {
                        j++;
                    }
                    if (0 < j) {
                        for (l in h.onKey) {
                            if (Keyboard._keyMap[l] == g) {
                                g = h.onKey[l];
                                g.call(h, d);
                                break;
                            }
                        }
                    } else {
                        h.handlekeyBoardEvents && h.handlekeyBoardEvents(EventSystem._keyboardEvents);
                    }
                }
            }
            if (d = EventSystem._touchEvents) {
                for (f = 0; f < d.length; f++) {}
            }
        };
        this.clear = function() {
            this.unSubscribe();
            for (var c in this) {
                this[c] && this[c].clear && this[c].clear(),
                this[c] = null,
                delete this[c];
            }
            var n = [d, f, g, h, m, k, q, u, p, l, y, r, j, x, z, v = A, s, D, w, E, F, J, B, _stop, 0, G, t, C, K];
            for (c in n) {
                n[c] && n[c].clear && n[c].clear(),
                n[c] = null,
                delete n[c];
            }
        };
        return this;
    }
}
var Action = function(c) {
    var d = false;
    this.hasDone = function() {
        return d;
    };
    this.Done = function() {
        d = true;
        c && c();
    };
    this.isSimpleAction = true;
    this.children = this.parent = null;
    this.getParent = function() {
        return this.parent;
    };
    this.elapsed = 0;
    this.update = function() {};
    this.step = function(c) {
        this.hasDone() || (this.elapsed += c, this.update(1 > this.elapsed / this.duration ? this.elapsed / this.duration: 1), 1 <= this.elapsed / this.duration && this.Done());
    };
    this.getChildrenLength = function() {
        var c = this.children;
        return c ? c.length: 0;
    };
    this.indexOfChildren = function() {
        if (this.parent && this.parent.children && 0 < this.parent.children.length) {
            for (var c = 0; c < this.parent.children.length; c++) {
                if (this.parent.children[c] === this) {
                    return c;
                }
            }
        } else {
            return 0;
        }
    };
    this.getChildByIndex = function(c) {
        if (this.children && 0 < this.children.length && c < this.children.length) {
            return this.children[c];
        }
    };
    this.startWithTarget = function() {};
},
Jump = function(c, d, f, g) {
    g = new Action(g);
    g.type = "jump";
    g.toHeight = c;
    g.duration = d;
    g.jumpTimes = f;
    g.update = function() {};
    return g;
},
MoveTo = function(c, d, f) {
    f = new Action(f);
    f.type = "moveto";
    f.toPosition = c;
    f.duration = d;
    f.update = function(c) {
        this.target && this.target.setPosition({
            x: this.startPosition.x + (this.toPosition.x - this.startPosition.x) * c,
            y: this.startPosition.y + (this.toPosition.y - this.startPosition.y) * c
        });
    };
    f.startWithTarget = function(c) {
        this.startPosition = c.getPosition();
    };
    f.elapsed = 0;
    return f;
},
MoveBy = function(c, d, f) {
    var g = new Action(f);
    g.type = "moveby";
    g.toPosition = c;
    g.duration = d;
    g.update = function(c) {
        this.target && this.target.setPosition({
            x: this.startPosition.x + this.toPosition.x * c,
            y: this.startPosition.y + this.toPosition.y * c
        });
    };
    g.startWithTarget = function(c) {
        this.startPosition = c.getPosition();
    };
    g.reverse = function() {
        return new MoveBy( - c, d, f);
    };
    return g;
},
ScaleTo = function(c, d, f, g) {
    g = new Action(g);
    g.type = "scaleto";
    g.scaleX = c;
    g.scaleY = d;
    g.duration = f;
    g.update = function(c) {
        this.target && this.target.setScale({
            x: this.startScaleX + (this.scaleX - this.startScaleX) * c,
            y: this.startScaleY + (this.scaleY - this.startScaleY) * c
        });
    };
    g.startWithTarget = function(c) {
        this.startScaleX = c.getScale().x;
        this.startScaleY = c.getScale().y;
    };
    return g;
},
ScaleBy = function(c, d, f, g) {
    var h = new Action(g);
    h.type = "scaleby";
    h.scaleX = c;
    h.scaleY = d;
    h.duration = f;
    h.update = function(c) {
        this.target && this.target.setScale({
            x: this.startScaleX + this.scaleX * c,
            y: this.startScaleY + this.scaleY * c
        });
    };
    h.startWithTarget = function(c) {
        this.startScaleX = c.getScale().x;
        this.startScaleY = c.getScale().y;
    };
    h.reverse = function() {
        return new ScaleBy( - c, -d, f, g);
    };
    return h;
},
RotateTo = function(c, d, f) {
    f = new Action(f);
    f.type = "rotateto";
    f.toAngle = c;
    f.duration = d;
    f.update = function(c) {
        this.target && this.target.setRotate(this.startAngel + (this.toAngle - this.startAngel) * c);
    };
    f.startWithTarget = function(c) {
        this.startAngel = c.getRotate();
    };
    return f;
},
RotateBy = function(c, d, f) {
    var g = new Action(f);
    g.type = "rotateby";
    g.deltaAngle = c;
    g.duration = d;
    g.update = function(c) {
        this.target && this.target.setRotate(this.startAngel + this.toAngle * c);
    };
    g.startWithTarget = function(c) {
        this.startAngel = c.getRotate();
    };
    g.reverse = function() {
        return new RotateBy( - c, d, f);
    };
    return g;
},
Blink = function(c, d, f) {
    f = new Action(f);
    f.type = "blink";
    f.blinkTimes = c;
    f.duration = d;
    return f;
},
TintTo = function(c, d, f) {
    f = new Action(f);
    f.type = "tintto";
    f.toColor = c;
    f.duration = d;
    return f;
},
TintBy = function(c, d, f) {
    f = new Action(f);
    f.type = "tintby";
    f.deltaColor = c;
    f.duration = d;
    return f;
},
FadeTo = function(c, d, f) {
    f = new Action(f);
    f.type = "fadeto";
    f.toOpacity = c;
    f.duration = d;
    f.update = function(c) {
        this.target && this.target.setAlpha(this.startOpacity + (this.toOpacity - this.startOpacity) * c);
    };
    f.startWithTarget = function(c) {
        this.startOpacity = c.getActualAlpha();
    };
    return f;
},
FadeIn = function(c, d) {
    var f = new Action(d);
    f.type = "fadein";
    f.duration = c;
    f.toOpacity = 1;
    f.update = function(c) {
        this.target && this.target.setAlpha(this.startOpacity + (this.toOpacity - this.startOpacity) * c);
    };
    f.startWithTarget = function(c) {
        this.startOpacity = c.getActualAlpha();
    };
    return f;
},
FadeOut = function(c, d) {
    var f = new Action(d);
    f.type = "fadeout";
    f.duration = c;
    f.toOpacity = 0;
    f.update = function(c) {
        this.target && this.target.setAlpha(this.startOpacity + (this.toOpacity - this.startOpacity) * c);
    };
    f.startWithTarget = function(c) {
        this.startOpacity = c.getActualAlpha();
    };
    return f;
},
Sequence = {
    withActions: function(c) {
        if (!c || !(c instanceof Array) || 0 == c.length) {
            return null;
        }
        var d = new Action;
        d.type = "sequence";
        d.isSimpleAction = false;
        for (var f = 0; f < c.length; f++) {
            c[f].parent = d;
        }
        d.children = c;
        d.currentActionIndex = 0;
        d.startWithTargetAndChildIndex = function(c) {
            d.children[c].target = d.target;
            d.children[c].startWithTarget(d.target);
        };
        d.startWithTarget = function() {
            d.startWithTargetAndChildIndex(d.currentActionIndex);
        };
        d.step = function(c) {
            if (!this.hasDone()) {
                var f = this.children[this.currentActionIndex];
                f && f.hasDone() && this.currentActionIndex < this.children.length - 1 && (this.currentActionIndex++, this.startWithTargetAndChildIndex(this.currentActionIndex), f = this.children[this.currentActionIndex]);
                f.step(c);
                this.currentActionIndex >= this.children.length - 1 && f.hasDone() && this.Done();
            }
        };
        return d;
    }
},
Repeat = {
    withAction: function(c, d) {
        var f = new Action;
        f.type = "repeat";
        f.isSimpleAction = false;
        f.children = c;
        f.repeatTimes = d;
        f.actionIndex = 0;
        return f;
    }
},
Reverse = {
    withAction: function(c) {
        var d = new Action;
        d.type = "reverse";
        d.isSimpleAction = false;
        d.children = c;
        d.actionIndex = 0;
        return d;
    }
},
Spawn = {
    withActions: function(c) {
        var d = new Action;
        d.type = "spawn";
        d.isSimpleAction = false;
        for (var f = 0; f < c.length; f++) {
            c[f].parent = d;
        }
        d.children = c;
        d.startWithTarget = function() {
            for (var c = 0; c < this.children.length; c++) {
                this.children[c].target = this.target,
                this.children[c].startWithTarget(this.target);
            }
        };
        d.step = function(c) {
            if (!this.hasDone()) {
                for (var f = true,
                d = 0; d < this.children.length; d++) {
                    this.children[d].hasDone() || (this.children[d].step(c), f = false);
                }
                f && this.Done();
            }
        };
        return d;
    }
},
RepeatForever = {
    withAction: function(c) {
        var d = new Action;
        d.type = "repeatforever";
        d.isSimpleAction = false;
        d.children = c;
        d.actionIndex = 0;
        d.step = function() {};
        return d;
    }
},
Delay = {
    delay: function(c, d) {
        var f = new Action(d);
        f.type = "delay";
        f.duration = c;
        return f;
    }
},
EaseIn = {
    withAction: function(c) {
        var d = new Action;
        d.type = "easeIn";
        d.isSimpleAction = false;
        d.children = c;
        d.actionIndex = 0;
        d.startWithTarget = function(f) {
            c.target = f;
            c.startWithTarget(f);
        };
        d.step = function(f) {
            c.hasDone() || (c.elapsed += f, this.update(1 > c.elapsed / c.duration ? c.elapsed / c.duration: 1), 1 <= c.elapsed / c.duration && c.Done());
        };
        d.update = function(f) {
            c.update(Math.pow(f, 2));
        };
        return d;
    }
},
EaseOut = {
    withAction: function(c) {
        var d = new Action;
        d.type = "easeOut";
        d.isSimpleAction = false;
        d.children = c;
        d.actionIndex = 0;
        d.startWithTarget = function(f) {
            c.target = f;
            c.startWithTarget(f);
        };
        d.step = function(f) {
            c.hasDone() || (c.elapsed += f, this.update(1 > c.elapsed / c.duration ? c.elapsed / c.duration: 1), 1 <= c.elapsed / c.duration && c.Done());
        };
        d.update = function(f) {
            c.update(Math.pow(f, 0.5));
        };
        return d;
    }
},
EaseInOut = {
    withAction: function(c) {
        var d = new Action;
        d.type = "actionEase";
        d.isSimpleAction = false;
        d.children = c;
        d.actionIndex = 0;
        d.startWithTarget = function(f) {
            c.target = f;
            c.startWithTarget(f);
        };
        d.step = function(f) {
            c.hasDone() || (c.elapsed += f, this.update(1 > c.elapsed / c.duration ? c.elapsed / c.duration: 1), 1 <= c.elapsed / c.duration && c.Done());
        };
        d.update = function(f) {
            var d = 1,
            d = -1,
            f = 2 * f;
            1 > f ? c.update(0.5 * Math.pow(f, 2)) : c.update(0.5 * d * (Math.pow(f - 2, 2) + 2 * d));
        };
        return d;
    }
},
EaseExponentialIn = {
    withAction: function(c) {
        var d = new Action;
        d.type = "EaseExponentialIn";
        d.isSimpleAction = false;
        d.children = c;
        d.actionIndex = 0;
        d.startWithTarget = function(f) {
            c.target = f;
            c.startWithTarget(f);
        };
        d.step = function(f) {
            c.hasDone() || (c.elapsed += f, this.update(1 > c.elapsed / c.duration ? c.elapsed / c.duration: 1), 1 <= c.elapsed / c.duration && c.Done());
        };
        d.update = function(f) {
            c.update(0 == f ? 0 : Math.pow(2, 10 * (f / 1 - 1)) - 0.001);
        };
        return d;
    }
},
EaseExponentialOut = {
    withAction: function(c) {
        var d = new Action;
        d.type = "EaseExponentialOut";
        d.isSimpleAction = false;
        d.children = c;
        d.actionIndex = 0;
        d.startWithTarget = function(f) {
            c.target = f;
            c.startWithTarget(f);
        };
        d.step = function(f) {
            c.hasDone() || (c.elapsed += f, this.update(1 > c.elapsed / c.duration ? c.elapsed / c.duration: 1), 1 <= c.elapsed / c.duration && c.Done());
        };
        d.update = function(f) {
            c.update(1 == f ? 1 : -Math.pow(2, -10 * f / 1) + 1);
        };
        return d;
    }
},
EaseExponentialInOut = {
    withAction: function(c) {
        var d = new Action;
        d.type = "EaseExponentialInOut";
        d.isSimpleAction = false;
        d.children = c;
        d.actionIndex = 0;
        d.startWithTarget = function(f) {
            c.target = f;
            c.startWithTarget(f);
        };
        d.step = function(f) {
            c.hasDone() || (c.elapsed += f, this.update(1 > c.elapsed / c.duration ? c.elapsed / c.duration: 1), 1 <= c.elapsed / c.duration && c.Done());
        };
        d.update = function(f) {
            f *= 2;
            f = 1 > f ? 0.5 * Math.pow(2, 10 * (f - 1)) : 0.5 * ( - Math.pow(2, 10 * (f - 1)) + 2);
            c.update(f);
        };
        return d;
    }
},
EaseSineIn = {
    withAction: function(c) {
        var d = new Action;
        d.type = "EaseSineIn";
        d.isSimpleAction = false;
        d.children = c;
        d.actionIndex = 0;
        d.startWithTarget = function(f) {
            c.target = f;
            c.startWithTarget(f);
        };
        d.step = function(f) {
            c.hasDone() || (c.elapsed += f, this.update(1 > c.elapsed / c.duration ? c.elapsed / c.duration: 1), 1 <= c.elapsed / c.duration && c.Done());
        };
        d.update = function(f) {
            c.update( - 1 * Math.cos(f * Math.PI / 2) + 1);
        };
        return d;
    }
},
EaseSineOut = {
    withAction: function(c) {
        var d = new Action;
        d.type = "EaseSineOut";
        d.isSimpleAction = false;
        d.children = c;
        d.actionIndex = 0;
        d.startWithTarget = function(f) {
            c.target = f;
            c.startWithTarget(f);
        };
        d.step = function(f) {
            c.hasDone() || (c.elapsed += f, this.update(1 > c.elapsed / c.duration ? c.elapsed / c.duration: 1), 1 <= c.elapsed / c.duration && c.Done());
        };
        d.update = function(f) {
            c.update(Math.sin(f * Math.PI / 2));
        };
        return d;
    }
},
EaseSineInOut = {
    withAction: function(c) {
        var d = new Action;
        d.type = "EaseSineInOut";
        d.isSimpleAction = false;
        d.children = c;
        d.actionIndex = 0;
        d.startWithTarget = function(f) {
            c.target = f;
            c.startWithTarget(f);
        };
        d.step = function(f) {
            c.hasDone() || (c.elapsed += f, this.update(1 > c.elapsed / c.duration ? c.elapsed / c.duration: 1), 1 <= c.elapsed / c.duration && c.Done());
        };
        d.update = function(f) {
            c.update( - 0.5 * (Math.cos(Math.PI * f) - 1));
        };
        return d;
    }
},
EaseBounce = {
    withAction: function(c) {
        var d = new Action;
        d.type = "EaseBounce";
        d.isSimpleAction = false;
        d.children = c;
        d.actionIndex = 0;
        d.startWithTarget = function(f) {
            c.target = f;
            c.startWithTarget(f);
        };
        d.step = function(f) {
            c.hasDone() || (c.elapsed += f, this.update(1 > c.elapsed / c.duration ? c.elapsed / c.duration: 1), 1 <= c.elapsed / c.duration && c.Done());
        };
        d.bounceTime = function(c) {
            if (c < 0.36363636363636365) {
                return 7.5625 * c * c;
            }
            if (c < 0.7272727272727273) {
                return c -= 0.5454545454545454,
                7.5625 * c * c + 0.75;
            }
            if (c < 0.9090909090909091) {
                return c -= 0.8181818181818182,
                7.5625 * c * c + 0.9375;
            }
            c -= 0.9545454545454546;
            return 7.5625 * c * c + 0.984375;
        };
        d.update = function() {
            console.log("please use ");
        };
        return d;
    }
},
EaseBounceIn = {
    withAction: function(c) {
        var d = EaseBounce.withAction(c);
        d.type = "EaseBounceIn";
        d.update = function(f) {
            f = 1 - this.bounceTime(1 - f);
            c.update(f);
        };
        return d;
    }
},
EaseBounceOut = {
    withAction: function(c) {
        var d = EaseBounce.withAction(c);
        d.type = "EaseBounceOut";
        d.update = function(f) {
            f = this.bounceTime(f);
            c.update(f);
        };
        return d;
    }
},
EaseBounceInOut = {
    withAction: function(c) {
        var d = EaseBounce.withAction(c);
        d.type = "EaseBounceInOut";
        d.update = function(f) {
            var d = 0,
            d = 0.5 > f ? 0.5 * (1 - this.bounceTime(1 - 2 * f)) : 0.5 * this.bounceTime(2 * f - 1) + 0.5;
            c.update(d);
        };
        return d;
    }
},
EaseBackIn = {
    withAction: function(c) {
        var d = new Action;
        d.type = "EaseBackIn";
        d.isSimpleAction = false;
        d.children = c;
        d.actionIndex = 0;
        d.startWithTarget = function(f) {
            c.target = f;
            c.startWithTarget(f);
        };
        d.step = function(f) {
            c.hasDone() || (c.elapsed += f, this.update(1 > c.elapsed / c.duration ? c.elapsed / c.duration: 1), 1 <= c.elapsed / c.duration && c.Done());
        };
        d.update = function(f) {
            c.update(f * f * (2.70158 * f - 1.70158));
        };
        return d;
    }
},
EaseBackOut = {
    withAction: function(c) {
        var d = new Action;
        d.type = "EaseBackOut";
        d.isSimpleAction = false;
        d.children = c;
        d.actionIndex = 0;
        d.startWithTarget = function(f) {
            c.target = f;
            c.startWithTarget(f);
        };
        d.step = function(f) {
            c.hasDone() || (c.elapsed += f, this.update(1 > c.elapsed / c.duration ? c.elapsed / c.duration: 1), 1 <= c.elapsed / c.duration && c.Done());
        };
        d.update = function(f) {
            f -= 1;
            c.update(f * f * (2.70158 * f + 1.70158) + 1);
        };
        return d;
    }
},
EaseBackInOut = {
    withAction: function(c) {
        var d = new Action;
        d.type = "EaseBackInOut";
        d.isSimpleAction = false;
        d.children = c;
        d.actionIndex = 0;
        d.startWithTarget = function(f) {
            c.target = f;
            c.startWithTarget(f);
        };
        d.step = function(f) {
            c.hasDone() || (c.elapsed += f, this.update(1 > c.elapsed / c.duration ? c.elapsed / c.duration: 1), 1 <= c.elapsed / c.duration && c.Done());
        };
        d.update = function(f) {
            f *= 2;
            1 > f ? c.update(f * f * (3.5949095 * f - 2.5949095) / 2) : (f -= 2, c.update(f * f * (3.5949095 * f + 2.5949095) / 2 + 1));
        };
        return d;
    }
},
ActionManager = {
    getNextActionWithTarget: function(c, d) {
        function f(c, d) {
            if (c) {
                var m = c.getParent();
                return ! m ? null: m.getChildrenLength() <= c.indexOfChildren() + 1 ? f(m, d) : m.getChildByIndex(c.indexOfChildren() + 1);
            }
        }
        return f(d, c.getMainAction());
    },
    startActionWithTarget: function(c, d, f) {
        c && d && (f && d.setMainAction(c), c.target = d, d.addActionToCurrent(c), c.startWithTarget(d));
    },
    performCurrentActionWithTarget: function(c) {
        for (var d = c.getCurrentAction(), f = 0; f < d.length; f++) {
            var g = d[f];
            if (g) {
                if (g.hasDone()) {
                    var h = null,
                    h = g.parent;
                    if (g && h && "spawn" == h.type && g.indexOfChildren() < h.getChildrenLength() - 1) {
                        continue;
                    } else {
                        h = ActionManager.getNextActionWithTarget(c, g);
                    }
                    h ? (c.replaceActionFromCurrentWithIndex(f, h), c.startAction(h)) : c.removeActionFromCurrent(g);
                    break;
                }
                g.step(GameUtil.getRunningGame().sleep);
            }
        }
    }
},
Keyboard = {
    _keyMap: {
        A: 65,
        B: 66,
        C: 67,
        D: 68,
        E: 69,
        F: 70,
        G: 71,
        H: 72,
        I: 73,
        J: 74,
        K: 75,
        L: 76,
        M: 77,
        N: 78,
        O: 79,
        P: 80,
        Q: 81,
        R: 82,
        S: 83,
        T: 84,
        U: 85,
        V: 86,
        W: 87,
        X: 88,
        Y: 89,
        Z: 90
    },
    _codeMap: {
        65 : "A",
        66 : "B",
        67 : "C",
        68 : "D",
        69 : "E",
        70 : "F",
        71 : "G",
        72 : "H",
        73 : "I",
        74 : "J",
        75 : "K",
        76 : "L",
        77 : "M",
        78 : "N",
        79 : "O",
        80 : "P",
        81 : "Q",
        82 : "R",
        83 : "S",
        84 : "T",
        85 : "U",
        86 : "V",
        87 : "W",
        88 : "X",
        89 : "Y",
        90 : "Z"
    },
    getRandomKey: function() {
        if (!Keyboard.keyTotal) {
            var c = 0,
            d;
            for (d in this._keyMap) {
                c++;
            }
            Keyboard.keyTotal = c;
        }
        var c = 0,
        f = parseInt(Math.random() * Keyboard.keyTotal);
        for (d in this._keyMap) {
            if (f == c) {
                return d;
            }
            c++;
        }
    }
},
addEventHandler = function(c, d, f) {
    c.addEventListener ? c.addEventListener(d, f, false) : c.attachEvent ? c.attachEvent("on" + d, eval(f)) : (c["on" + d] = f);
},
Touch = {
    _stateMap: {},
    addListener: function() {
        var c = GameUtil.getDom(),
        d = [];
        addEventHandler(c, "",
        function(c) {
            _event = c || window.event;
            d.push(_event);
            Game.handleEvent(_event);
        });
        document.onclick = function(c) {
            c = c || event;
            Touch._stateMap[c.keyCode || c.which] = true;
        };
        document.onmouseover = function(c) {
            c = c || event;
            Touch._stateMap[c.keyCode || c.which] = false;
        };
    },
    removeListener: function() {
        document.onclick = null;
        document.onmouseover = null;
    },
    check: function() {
        return true;
    }
},
ParticalSystem = function() {
    var c = [];
    this.emit = function(d) {
        c.push(d);
    };
    this.update = function() {
        var d = new Partical({
            x: 500 * Math.random(),
            y: 500 * Math.random()
        },
        0, 100, "#" + (16777215 * Math.random() << 0).toString(16), 2 * Math.random());
        this.emit(d);
        for (var f in c) {
            d = c[f],
            d instanceof Partical && (d.getOlder(), d.age >= d.life && c && (c.length && c.length >= f) && (c[f] = c[c.length - 1], c.pop()));
        }
        var d = GameUtil.getContext(),
        g;
        for (g in c) {
            f = c[g],
            f instanceof Partical && (f.update(), d.globalAlpha = 1 - f.age / f.life, d.fillStyle = f.color, d.beginPath(), d.arc(f.position.x, f.position.y, f.size, 0, 2 * Math.PI, true), d.closePath(), d.fill(), d.globalAlpha = 1);
        }
    };
},
Partical = function(c, d, f, g, h) {
    this.position = c;
    this.velocity = d;
    this.acceleration = {
        x: 0,
        y: 0
    };
    this.age = 0;
    this.life = f;
    this.color = g;
    this.size = h;
    this.getOlder = function() {
        this.age++;
    };
    this.update = function() {
        0.5 <= Math.random() ? (this.position.x += 2, this.position.y += 2) : (this.position.x -= 2, this.position.y -= 2);
    };
}; (function(c) {
    c = c.navigator.userAgent.toLowerCase();
    if (/msie|applewebkit.+safari/.test(c)) {
        var d = Array.prototype.sort;
        Array.prototype.sort = function(c) {
            if (c && "function" === typeof c) {
                if (2 > this.length) {
                    return this;
                }
                var g = 0,
                h = g + 1,
                m = this.length,
                k;
                for (k = 0; g < m; g++) {
                    for (h = g + 1; h < m; h++) {
                        if (k = c.call(this, this[g], this[h]), k = 0 < ("number" === typeof k ? k: k ? 1 : 0) ? true: false) {
                            k = this[g],
                            this[g] = this[h],
                            this[h] = k;
                        }
                    }
                }
                return this;
            }
            return d.call(this);
        };
    }
})(window);
var EventSystem = {
    initial: function() {
        function c(c) {
            if (c && !GameUtil.getRunningGame().inHandingEvent) {
                if (c.type && (0 == c.type.indexOf("mouse") || 0 == c.type.indexOf("touch"))) {
                    for (var d in f._mouseEvents) {
                        var h = f._mouseEvents[d];
                        if (h && h.type && h.type === c.type) {
                            EventSystem.removeEvent(h);
                            break;
                        }
                    }
                    c.absolutePosition = {
                        x: c.offsetX ? c.offsetX: c.layerX,
                        y: c.offsetY ? c.offsetY: c.layerY
                    };
                    g(f._mouseEvents, c);
                } else {
                    c.type && 0 == c.type.indexOf("key") ? g(f._keyboardEvents, c) : g(f._touchEvents, c);
                }
            }
        }
        var d = function(c, f, d) {
            c && f && d && (c.addEventListener ? c.addEventListener(f, d, false) : c.attachEvent ? c.attachEvent("on" + f, eval(d)) : (c["on" + f] = d));
        };
        this._mouseEventTypes = "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave".split(" ");
        this._keyboardEventTypes = ["keydown", "keypress", "keyup"];
        this._touchEventTypes = ["touchstart", "touchmove", "touchend", "touchcancel"];
        this._mouseEvents = [];
        this._keyboardEvents = [];
        this._touchEvents = [];
        var f = this,
        g = function(c, f) {
            c && f && f.type && c.push(f);
        };
        EventSystem.gainEvent = c;
        for (var h in this._mouseEventTypes) {
            d(GameUtil.getDom(), this._mouseEventTypes[h], c);
        }
        for (h in this._keyboardEventTypes) {
            d(document, this._keyboardEventTypes[h], c);
        }
        for (h in this._touchEventTypes) {
            d(GameUtil.getDom(), this._touchEventTypes[h], c);
        }
        code = _event = e = h = null;
    },
    removeEvent: function(c) {
        for (var d in this._mouseEvents) {
            if (this._mouseEvents[d] === c) {
                delete this._mouseEvents[d];
                break;
            }
        }
    },
    resetEvents: function() {
        this._mouseEvents = [];
        this._keyboardEvents = [];
        this._touchEvents = [];
    }
},
AudioEngine = {},
isIE = /msie/i.test(navigator.userAgent),
isSafari = -1 < navigator.userAgent.indexOf("Safari") && 1 > navigator.userAgent.indexOf("Chrome"),
supportMp3 = isIE || isSafari;
AudioEngine.sharedEngine = function() {
    var c = window.audioEngine;
    if (c) {
        return c;
    }
    var d = function(c) {
        var d = document.createElement("audio");
        d || console.log("Your browser doesn't support audio tag!");
        document.body.appendChild(d);
        d.autoplay = false;
        d.preload = "auto";
        var h = c.substr(c.length - 4).toLowerCase();
        supportMp3 && ".ogg" == h ? (c = c.substr(0, c.length - 4) + ".mp3") : !supportMp3 && ".mp3" == h && (c = c.substr(0, c.length - 4) + ".ogg");
        d.src = c;
        d.onLoaded = function() {
            d.loaded || this.callback && this.callback(this);
            d.loaded = true;
        };
        d.setCallback = function(c) {
            this.callback = c;
        };
        addEventHandler(d, "canplaythrough",
        function() {
            d.onLoaded();
        });
        return d;
    },
    c = {
        cacheAudio: [],
        stopEffect: function(f) { (f = c.contains(f)) && f.loaded && f.pause();
        },
        playEffect: function(f, d) {
            var h = c.contains(f);
            h ? h.loaded && h.play() : c.preLoadAudio(f,
            function(c) {
                d && ("loop" in c ? (c.loop = true) : addEventHandler(c, "ended",
                function() {
                    setTimeout(function() {
                        c.currentTime = 0;
                    },
                    200);
                }));
                c.play();
            });
        },
        preLoadAudio: function(f, g) {
            if (f) {
                if (f instanceof Array) {
                    for (var h = 0; h < f.length; h++) {
                        c.preLoadAudio(f[h]);
                    }
                } else {
                    c.contains(f) || (h = new d(f, g), g && h.setCallback(g), c.cacheAudio[f] = h);
                }
            }
        },
        contains: function(c) {
            for (var d in this.cacheAudio) {
                if (d == c || this.cacheAudio[d].src == c) {
                    return this.cacheAudio[d];
                }
            }
            return null;
        },
        play: function(c) {
            c.play();
        },
        pause: function(c) {
            c.pause();
        }
    };
    window.audioEngine = c;
    return window.audioEngine;
};
var _resources = [],
triggerLoad = function(c) {
    for (var d = 0; d < _resources[c].callbacks.length; d++) {
        var f = _resources[c].callbacks[d];
        f && (f.called ? (_resources[c].callbacks[d] = null) : (f(_resources[c].ele), f.called = true));
    }
},
ResourceLoad = function(c, d, f) {
    if (c) {
        if (c instanceof Array) {
            for (var g = 0; g < c.length; g++) {
                var h = ResourceLoad,
                m = c[g],
                k;
                if (k = d) {
                    a: {
                        try {
                            var q = Function.toString.call(d.prototype.constructor).split(/[\n\r]/).join(""),
                            u = q.substr(10, q.indexOf("{") - 10).replace(/\s/g, ""),
                            u = u.substr(0, u.length - 1).split(","),
                            p = q.substr(q.indexOf("{") + 1),
                            p = p.substr(0, p.lastIndexOf("}"));
                            u.push(p);
                            k = Function.apply(window, u);
                            break a;
                        } catch(l) {}
                        k = void 0;
                    }
                }
                h(m, k, f);
            }
        } else if ("string" === typeof c && (_resources[c] || (_resources[c] = [], f && f(c)), _resources[c].callbacks = _resources[c].callbacks || [], d && _resources[c].callbacks.push(d), _resources[c].ele)) {
            return triggerLoad(c),
            _resources[c].ele;
        }
    }
},
ImageLoad = function(c, d) {
    ResourceLoad(c, d,
    function(c) {
        var d = new Image;
        d.src = c;
        d.onload = function() {
            _resources[c].ele = d;
            triggerLoad(c);
        };
    });
},
AudioLoad = function(c, d) {
    ResourceLoad(c, d,
    function(c) {
        AudioEngine.sharedEngine().preLoadAudio(c,
        function(d) {
            _resources[c].ele = d;
            triggerLoad(c);
        });
    });
},
ProgressBar = function(c) {
    var c = c || 10,
    d = new Sprite;
    d.setWidth(500);
    var f = 0;
    new ImageLoad("images/progress_orange.gif",
    function(g) {
        d.setHeight(g.height);
        d.setPosition({
            x: 70,
            y: 230
        });
        d.drawWithoutImage = function(d) {
            d.save();
            var m = d.createPattern(g, "repeat");
            d.fillStyle = m;
            d.fillRect(70, 230, 500 * Math.min(f / c, 1), g.height);
            d.strokeStyle = "#eee";
            d.rect(70, 230, 500, g.height);
            d.stroke();
            d.restore();
        };
    });
    d.subscribe("load",
    function() {++f == c && (this.unSubscribe("load"), this.publish("loaded"));
    });
    return d;
};
0 > window.location.host.indexOf(".paomall.") && window.location.reload();
var addEventHandler = function(c, d, f) {
    c.addEventListener ? c.addEventListener(d, f, false) : c.attachEvent ? c.attachEvent("on" + d, eval(f)) : (c["on" + d] = f);
},
domReady = function(c) {
    if (! ("onreadystatechange" in document) || !("readystatechange" in document)) {
        var d = setTimeout(function() {
            if ("complete" === document.readyState || "loaded" === document.readyState) {
                clearTimeout(d),
                c && c();
            }
        },
        50);
    } else {
        addEventHandler(document, "readystatechange",
        function() { ("complete" === this.readyState || "loaded" === this.readyState) && c && c();
        });
    }
};
domReady(function() {
    function c(c, f, g, h, j) {
        if (0 >= h) {
            c = void 0;
        } else if (j = h * (void 0 === j ? 1 : j), a = j * j * (c[0] - f[0]) * (c[0] - f[0]) + h * h * (c[1] - f[1]) * (c[1] - f[1]), 0 >= a) {
            c = void 0;
        } else {
            b = 2 * (j * j) * (f[0] - c[0]) * (c[0] - g[0]) + 2 * (h * h) * (f[1] - c[1]) * (c[1] - g[1]);
            g = j * j * (c[0] - g[0]) * (c[0] - g[0]) + h * h * (c[1] - g[1]) * (c[1] - g[1]) - h * h * j * j;
            b: {
                h = a;
                j = b;
                if (0 != h) {
                    g = j * j - 4 * h * g;
                    if (0 == g) {
                        g = [ - 1 * j / (2 * h), -1 * j / (2 * h)];
                        break b;
                    }
                    if (0 < g) {
                        g = [( - 1 * j + Math.sqrt(g)) / (2 * h), ( - 1 * j - Math.sqrt(g)) / (2 * h)];
                        break b;
                    }
                }
                g = void 0;
            }
            g ? (g = [[c[0] + g[0] * (f[0] - c[0]), c[1] + g[0] * (f[1] - c[1])], [c[0] + g[1] * (f[0] - c[0]), c[1] + g[1] * (f[1] - c[1])]], 0 >= d(g[0][0] - c[0]) * d(g[0][0] - f[0]) && 0 >= d(g[0][1] - c[1]) * d(g[0][1] - f[1]) || (g[0] = null), 0 >= d(g[1][0] - c[0]) * d(g[1][0] - f[0]) && 0 >= d(g[1][1] - c[1]) * d(g[1][1] - f[1]) || (g[1] = null), c = g) : (c = void 0);
        }
        return c && (c[0] || c[1]);
    }
    function d(c) {
        return 0 > c ? -1 : 0 < c ? 1 : 0;
    }
    var f = {
        url: "images/fruit/peach.png",
        departA: "images/fruit/peach-1.png",
        departB: "images/fruit/peach-2.png",
        slideArc: 20
    },
    g = {
        url: "images/fruit/sandia.png",
        departA: "images/fruit/sandia-1.png",
        departB: "images/fruit/sandia-2.png",
        slideArc: 30
    },
    h = [{
        url: "images/fruit/apple.png",
        departA: "images/fruit/apple-1.png",
        departB: "images/fruit/apple-2.png",
        slideArc: 20
    },
    {
        url: "images/fruit/banana.png",
        departA: "images/fruit/banana-1.png",
        departB: "images/fruit/banana-2.png",
        slideArc: 20
    },
    {
        url: "images/fruit/basaha.png",
        departA: "images/fruit/basaha-1.png",
        departB: "images/fruit/basaha-2.png",
        slideArc: 20
    },
    f, g, {
        url: "images/fruit/boom.png",
        slideArc: 25
    }],
    m = function(c) {
        var d = new Sprite({
            url: c.url
        });
        if (c.shadow) {
            var f = new Sprite({
                url: "images/shadow.png"
            });
            f.setPosition({
                x: 0,
                y: 50
            });
            f.setAnchorPoint({
                x: 0.5,
                y: 0.5
            });
            f.tag = "shadow";
            d.addChild(f);
        }
        "images/fruit/boom.png" == c.url ? (d.depart = true) : null;
        d.Depart = function() {
            this.removeChildByTag("shadow");
            if (!c.departA || !c.departB) {
                AudioEngine.sharedEngine().playEffect("sounds/boom.ogg"),
                this.publish("boom");
            } else {
                this.publish("cut");
                AudioEngine.sharedEngine().playEffect("sounds/splatter.ogg");
                this.depart = true;
                this.publish("depart");
                this.url = null;
                var d = new Sprite({
                    url: c.departA
                });
                d.setPosition({
                    x: 0,
                    y: 0
                });
                d.setAnchorPoint({
                    x: 0.5,
                    y: 0.5
                });
                this.addChild(d);
                var f = new Sprite({
                    url: c.departB
                });
                f.setPosition({
                    x: 0,
                    y: 0
                });
                f.setAnchorPoint({
                    x: 0.5,
                    y: 0.5
                });
                this.addChild(f);
                var g = 0;
                d.onUpdate = function() {
                    this.setPosition({
                        x: parseInt( - 2 * g),
                        y: parseInt(1.2 * g)
                    });
                    this.setRotate(0.0471 * g);
                    g++;
                };
                var h = 0;
                f.onUpdate = function() {
                    this.setPosition({
                        x: parseInt(2 * h),
                        y: parseInt(1.2 * h)
                    });
                    this.setRotate(0.0471 * h);
                    h++;
                };
            }
        };
        return d;
    },
    k = function() {
        var c = new Layer;
        c.name = "knifeLayer";
        c.onInit = function() {
            var c = function() {
                var c = new Sprite;
                c.parts = [];
                c.drawWithoutImage = function(c) {
                    if (this.parts) {
                        for (var d = 0; d < this.parts.length; d++) {
                            var f = this.parts[d];
                            f && 0 < f.life ? (f.life--, f.width = 12 * f.life / 15) : delete this.parts[d];
                        }
                        d = false;
                        c.save();
                        c.strokeStyle = "#ffffff";
                        for (var g in this.parts) {
                            if (!d && this.parts[g]) {
                                var h = this.parts[g],
                                d = true;
                                c.beginPath();
                                c.moveTo(h.x, h.y);
                            } else {
                                d && (h && this.parts[g]) && (g = this.parts[g], c.lineWidth = g.width, c.lineTo(g.x, g.y), c.stroke(), c.closePath(), c.beginPath(), c.moveTo(g.x, g.y));
                            }
                        }
                        c.closePath();
                        c.restore();
                    }
                };
                return window.knife = c;
            },
            d = false;
            this.subscribe("restart",
            function() {
                GameUtil.getRunningGame().setCurrentScene(new q);
            });
            this.onTouch.start = this.onMouse.down = function(f) {
                d = true;
                this.knife && (this.knife.parts = null);
                this.knife = null;
                this.knife = new c;
                f = {
                    x: parseInt(f.absolutePosition.x),
                    y: parseInt(f.absolutePosition.y)
                };
                this.knife.parts.push(f);
                this.addChild(this.knife);
            };
            this.onTouch.move = this.onMouse.move = function(c) {
                var f = c.absolutePosition,
                c = parseInt(f.x),
                f = parseInt(f.y);
                d && (this.knife && this.knife.parts) && (this.knife.parts.push({
                    x: c,
                    y: f,
                    life: 15
                }), this.publish("knife"));
            };
            this.onTouch.end = this.onMouse.up = function() {
                d = false;
            };
        };
        return c;
    },
    q = function() {
        var d = new Scene,
        h = new Layer;
        h.name = "startLayer";
        d.addLayer(h);
        h.subscribe("cut",
        function() {
            h.unSubscribe("cut", arguments.callee);
            setTimeout(function() {
                d.publish("clear");
                GameUtil.getRunningGame().setCurrentScene(new u);
            },
            1500);
        });
        h.onInit = function() {
            function d(c, f, g) {
                c.startAction(Sequence.withActions([Delay.delay(2800), new ScaleTo(1, 1, g,
                function() {
                    var d = 0;
                    c.onUpdate = function() {
                        d += f;
                        d = parseFloat(d.toPrecision(3));
                        d == 6.28 * (0 > f ? -1 : 1) ? (d = 0) : null;
                        this.setRotate(d);
                    };
                })]));
            }
            function h(d) {
                d.subscribe("knife",
                function() {
                    if (window.knife && window.knife.parts) {
                        for (var f = [], g = 1; g < window.knife.parts.length; g++) {
                            var h = window.knife.parts[g],
                            j = window.knife.parts[g - 1];
                            if (h && (h.x && h.y && j && j.x && j.y) && (h = c([h.x, h.y], [j.x, j.y], [d.getActualPosition().x + d.getWidth() / 2, d.getActualPosition().y + d.getHeight() / 2], 30))) {
                                for (j = 0; j < f.length && f[j] != h; j++) {}
                                j == f.length && f.push(h);
                                2 < f.length && (f = f.slice(0, 2));
                                if (2 == f.length) {
                                    d.Depart();
                                    d.unSubscribe("knife", arguments.callee);
                                    break;
                                }
                            }
                        }
                    }
                });
            }
            var j = new Sprite({
                url: "images/background.jpg"
            });
            this.addChild(j);
            j = new Sprite({
                url: "images/home-mask.png"
            });
            this.addChild(j);
            j.setPosition({
                x: 0,
                y: -135
            });
            j.onImageLoad = function() {
                var c = new Sprite({
                    url: "images/logo.png"
                });
                c.setPosition({
                    x: 20,
                    y: 0
                });
                this.addChild(c);
                c = new MoveTo({
                    x: 0,
                    y: 0
                },
                1000);
                c = EaseExponentialOut.withAction(c);
                this.startAction(c);
            };
            j = new Sprite({
                url: "images/ninja.png"
            });
            j.setPosition({
                x: 340,
                y: -81
            });
            j.onImageLoad = function() {
                this.setIndex(1);
                var c = new MoveTo({
                    x: 340,
                    y: 25
                },
                1000),
                d = Delay.delay(1000);
                this.startAction(Sequence.withActions([d, EaseBounceOut.withAction(c)]));
            };
            this.addChild(j);
            j = new Sprite({
                url: "images/home-desc.png"
            });
            j.setPosition({
                x: -200,
                y: 130
            });
            j.onImageLoad = function() {
                this.startAction(Sequence.withActions([Delay.delay(2000), EaseIn.withAction(new MoveBy({
                    x: 200,
                    y: 0
                },
                280))]));
            };
            this.addChild(j);
            var l = new Sprite({
                url: "images/dojo.png"
            });
            l.setPosition({
                x: 30,
                y: 250
            });
            l.setAnchorPoint({
                x: 0.5,
                y: 0.5
            });
            l.setScale({
                x: 0,
                y: 0
            });
            this.addChild(l);
            l.onImageLoad = function() {
                f.shadow = false;
                var c = new m(f);
                c.setPosition({
                    x: l.getWidth() / 2 - 30,
                    y: l.getHeight() / 2 - 30
                });
                c.setAnchorPoint({
                    x: 0.5,
                    y: 0.5
                });
                c.setScale({
                    x: 0,
                    y: 0
                });
                this.addChild(c);
                h(c);
                d(c, 0.02, 500);
                d(l, -0.01, 500);
            };
            var k = new Sprite({
                url: "images/new-game.png"
            });
            k.tag = "newGame";
            k.setPosition({
                x: 230,
                y: 240
            });
            k.setAnchorPoint({
                x: 0.5,
                y: 0.5
            });
            this.addChild(k);
            k.setScale({
                x: 0,
                y: 0
            });
            k.onImageLoad = function() {
                g.shadow = false;
                var c = new m(g);
                c.setPosition({
                    x: k.getWidth() / 2 - 49,
                    y: k.getHeight() / 2 - 43
                });
                c.tag = "sandia";
                c.setAnchorPoint({
                    x: 0.5,
                    y: 0.5
                });
                c.setScale({
                    x: 0,
                    y: 0
                });
                this.addChild(c);
                h(c);
                d(c, -0.02, 500);
                d(this, 0.01, 500);
            };
            var v = new Sprite({
                url: "images/quit.png"
            });
            v.setPosition({
                x: 480,
                y: 300
            });
            v.setAnchorPoint({
                x: 0.5,
                y: 0.5
            });
            v.setScale({
                x: 0,
                y: 0
            });
            this.addChild(v);
            v.onImageLoad = function() {
                var c = new Sprite({
                    url: "images/fruit/boom.png"
                });
                c.setScale({
                    x: 0,
                    y: 0
                });
                c.setPosition({
                    x: v.getWidth() / 2 - 34,
                    y: v.getHeight() / 2 - 34
                });
                c.setAnchorPoint({
                    x: 0.5,
                    y: 0.5
                });
                this.addChild(c);
                d(c, 0.01, 500);
                d(this, -0.01, 500);
            };
            j = new Sprite({
                url: "images/new.png"
            });
            j.setPosition({
                x: 160,
                y: 240
            });
            j.setScale({
                x: 0,
                y: 0
            });
            j.setAnchorPoint({
                x: 0.5,
                y: 0.5
            });
            j.onImageLoad = function() {
                this.startAction(Sequence.withActions([Delay.delay(2800), new ScaleTo(1, 1, 500,
                function() {})]));
            };
            this.addChild(j);
        };
        AudioEngine.sharedEngine().playEffect("sounds/menu.ogg");
        d.subscribe("clear",
        function() {
            this.unSubscribe();
            AudioEngine.sharedEngine().stopEffect("sounds/menu.ogg");
        });
        d.addLayer(new k);
        return d;
    };
    window.lineInEllipse = c;
    var u = function() {
        var d = new Scene,
        f = new Layer;
        f.name = "gameLayer";
        d.addLayer(f);
        d.addLayer(new k);
        var g = new Layer;
        d.addLayer(g);
        g.onInit = function() {
            var d = {
                rand: function(c) {
                    return Math.max(0, Math.floor(Math.random() * c - 0.85));
                },
                getFruit: function() {
                    var c = h[this.rand(6)];
                    c.shadow = true;
                    return c;
                },
                commit: function() {
                    var c = new m(this.getFruit()),
                    d = 0,
                    f = 0,
                    g = 30,
                    h = this.rand(180),
                    h = 0.5 < Math.random() ? h: -1 * h,
                    g = (0 > h ? 640 - (320 + h) - 120 : 320 + h - 120) * (0 > h ? 1 : -1) / 100;
                    c.setPosition({
                        x: 320 + h,
                        y: 500
                    });
                    c.setAnchorPoint({
                        x: 0.5,
                        y: 0.5
                    });
                    var j = 0.02;
                    c.onUpdate = function() {
                        var c = this.getPosition(),
                        k = this.getWidth(),
                        l = this.getHeight();
                        c.x < -k || c.x > 640 + k || c.y > 500 + l ? (this.unSubscribe("knife"), this.depart || this.publish("lose"), this && this.clear && this.clear()) : (c = Math.round(500 + -100 * f + 5 * f * f), this.setPositionY(c), this.depart || (c = Math.round(g * d + 320 + h), this.setPositionX(c)), this.setRotate(j += 0.02), d += 1, f += 0.1);
                    };
                    AudioEngine.sharedEngine().playEffect("sounds/throw.ogg");
                    return c;
                }
            },
            f = this,
            g = 0;
            setTimeout(function() {
                if (f) {
                    if (f.isPlaying && f.isPlaying()) {
                        var h = d.commit();
                        h.tag = g++;
                        f.addChild(h);
                        h.subscribe("knife",
                        function() {
                            if (window.knife && window.knife.parts && h.isPlaying()) {
                                for (var d = [], f = 1; f < window.knife.parts.length; f++) {
                                    var g = window.knife.parts[f],
                                    j = window.knife.parts[f - 1];
                                    if (g && (g.x && g.y && j && j.x && j.y) && (g = c([g.x, g.y], [j.x, j.y], [h.getActualPosition().x + h.getWidth() / 2, h.getActualPosition().y + h.getHeight() / 2], 30))) {
                                        for (j = 0; j < d.length && d[j] != g; j++) {}
                                        j == d.length && d.push(g);
                                        2 < d.length && (d = d.slice(0, 2));
                                        if (2 == d.length) {
                                            h.Depart();
                                            h.unSubscribe("knife", arguments.callee);
                                            break;
                                        }
                                    }
                                }
                            }
                        });
                    }
                    setTimeout(arguments.callee, 500 * Math.random());
                }
            },
            1000);
        };
        f.onInit = function() {
            var c = new Sprite({
                url: "images/background.jpg"
            });
            this.addChild(c);
            c = new Sprite;
            c.setPosition({
                x: -100,
                y: 0
            });
            var d = new Sprite({
                url: "images/score.png"
            });
            d.setPosition({
                x: 10,
                y: 10
            });
            var f = new Sprite,
            g = 0;
            f.setPosition({
                x: 50,
                y: 10
            });
            f.subscribe("depart",
            function() {
                g++;
            });
            f.drawWithoutImage = function(c) {
                c.save();
                var d = this.getActualPosition();
                c.fillStyle = "#af7c05";
                c.font = "34px Tahoma bold";
                c.textBaseline = "top";
                c.fillText(g, d.x, d.y);
                c.restore();
            };
            var h = new Sprite;
            h.setPosition({
                x: 10,
                y: 60
            });
            h.setAnchorPoint({
                x: 0,
                y: 0
            });
            h.drawWithoutImage = function(c) {
                c.save();
                var d = this.getActualPosition();
                c.fillStyle = "#af7c05";
                c.font = "16px Tahoma bold";
                c.textBaseline = "middle";
                c.fillText("Best : 999", d.x, d.y);
                c.restore();
            };
            c.addChild(d);
            c.addChild(f);
            c.addChild(h);
            this.addChild(c);
            c.startAction(new MoveTo({
                x: 0,
                y: 0
            },
            500));
            c = new Sprite;
            c.setPosition({
                x: 800,
                y: 20
            });
            var k = new Sprite({
                url: ["images/xxx.png", "images/xxxf.png"]
            });
            k.setScale({
                x: 0.5,
                y: 0.5
            });
            k.setPosition({
                x: -70,
                y: 20
            });
            var l = new Sprite({
                url: ["images/xxx.png", "images/xxxf.png"]
            });
            l.setScale({
                x: 0.8,
                y: 0.8
            });
            l.setPosition({
                x: -40,
                y: 20
            });
            var m = new Sprite({
                url: ["images/xxx.png", "images/xxxf.png"]
            });
            m.setPosition({
                x: 0,
                y: 20
            });
            c.addChild(k);
            c.addChild(l);
            c.addChild(m);
            var n = 0;
            c.subscribe("lose",
            function() {
                n++;
                1 == n ? k.setImageIndex(1) : 2 == n ? l.setImageIndex(1) : 3 == n && (m.setImageIndex(1), this.publish("gameover"));
            });
            this.addChild(c);
            c.startAction(new MoveTo({
                x: 600,
                y: 0
            },
            1000));
        };
        var r = new Layer;
        r.setVisible(false);
        r.onInit = function() {
            var c = new Sprite({
                url: "images/game-over.png"
            });
            c.onImageLoad = function() {
                this.setPosition({
                    x: parseInt(320 - this.getWidth() / 2),
                    y: parseInt(240 - this.getHeight() / 2)
                });
                this.setScale({
                    x: 0,
                    y: 0
                });
                this.startAction(EaseExponentialOut.withAction(new ScaleTo(1, 1, 1000)));
                this.onTouch.start = this.onMouse.down = function() {
                    this.publish("restart");
                };
                AudioEngine.sharedEngine().playEffect("sounds/over.ogg");
            };
            c.setAnchorPoint({
                x: 0.5,
                y: 0.5
            });
            this.addChild(c);
        };
        d.addLayer(r);
        d.subscribe("gameover",
        function() {
            g && g.pause && g.pause();
            g && g.clear && g.clear();
            g = null;
            r && r.setVisible && r.setVisible(true);
        });
        d.subscribe("boom",
        function() {
            this.publish("lose");
        });
        return d;
    },
    p = [];
    p.canvasId = "game";
    p.width = "640";
    p.height = "480";
    _game = new Game(p);
    _game.setCurrentScene(new(function() {
        var c = new Scene,
        d = new Layer;
        d.name = "emptyLayer";
        c.addLayer(d);
        d.onInit = function() {
            var c = "images/background.jpg images/fruit/apple.png images/fruit/apple-1.png images/fruit/apple-2.png images/fruit/banana.png images/fruit/banana-1.png images/fruit/banana-2.png images/fruit/basaha.png images/fruit/basaha-1.png images/fruit/basaha-2.png images/fruit/peach.png images/fruit/peach-1.png images/fruit/peach-2.png images/fruit/sandia.png images/fruit/sandia-1.png images/fruit/sandia-2.png images/fruit/boom.png images/shadow.png images/home-mask.png images/logo.png images/ninja.png images/home-desc.png images/dojo.png images/new-game.png images/quit.png images/new.png images/score.png images/xxx.png images/xxxf.png images/game-over.png".split(" "),
            d = "sounds/boom.ogg sounds/splatter.ogg sounds/menu.ogg sounds/menu.ogg sounds/throw.ogg sounds/over.ogg".split(" "),
            f = new ProgressBar(isSafari ? c.length: c.length + d.length);
            new ImageLoad(c,
            function() {
                this.publish("load");
            });
            new AudioLoad(d,
            function() {
                this.publish("load");
            });
            this.addChild(f);
            this.subscribe("loaded",
            function() {
                this.unSubscribe();
                setTimeout(function() {
                    GameUtil.getRunningGame().setCurrentScene(new q);
                },
                200);
            });
        };
        return c;
    }));
    _game.start();
    EventSystem.initial();
});